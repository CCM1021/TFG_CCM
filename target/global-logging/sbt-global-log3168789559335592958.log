[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\CARLOS~1\AppData\Local\Temp\idea1.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\CARLOS~1\AppData\Local\Temp\idea1.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.9.7 (Oracle Corporation Java 22.0.2)
[debug] Load.defaultLoad until apply took 105.6189ms
[debug]           Load.loadUnit: plugins took 87.5815ms
[debug]           Load.loadUnit: defsScala took 0.517ms
[debug] [Loading] Scanning directory C:\TFG\testbech\TFG_CCM\project
[debug]             Load.loadUnit: mkEval took 5.2172ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\TFG\testbech\TFG_CCM\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 13.0073 ms
[info] loading settings for project tfg_ccm-build from idea1.sbt ...
[debug]               Load.resolveProject(tfg_ccm-build) took 48.8559ms
[debug]             Load.loadTransitive: finalizeProject(Project(id tfg_ccm-build, base: C:\TFG\testbech\TFG_CCM\project, plugins: List(<none>))) took 82.5215ms
[debug] [Loading] Done in C:\TFG\testbech\TFG_CCM\project, returning: (tfg_ccm-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 320.7949ms
[debug]           Load.loadUnit: cleanEvalClasses took 9.0533ms
[debug]         Load.loadUnit(file:/C:/TFG/testbech/TFG_CCM/project/, ...) took 424.801ms
[debug]       Load.apply: load took 563.049ms
[debug]       Load.apply: resolveProjects took 6.8752ms
[debug]       Load.apply: finalTransforms took 55.7937ms
[debug]       Load.apply: config.delegates took 7.3076ms
[debug]       Load.apply: Def.make(settings)... took 423.7827ms
[debug]       Load.apply: structureIndex took 86.8162ms
[debug]       Load.apply: mkStreams took 1.1957ms
[info] loading project definition from C:\TFG\testbech\TFG_CCM\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 2081.3035ms
[debug]     Load.loadUnit: defsScala took 0.0027ms
[debug] [Loading] Scanning directory C:\TFG\testbech\TFG_CCM
[debug]       Load.loadUnit: mkEval took 0.2663ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.1743 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 27.6023ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\TFG\testbech\TFG_CCM, plugins: List(<none>))) took 31.4645ms
[debug] [Loading] Done in C:\TFG\testbech\TFG_CCM, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 101.4163ms
[debug]     Load.loadUnit: cleanEvalClasses took 8.6235ms
[debug]   Load.loadUnit(file:/C:/TFG/testbech/TFG_CCM/, ...) took 2193.0799ms
[debug] Load.apply: load took 2215.7099ms
[debug] Load.apply: resolveProjects took 0.8076ms
[debug] Load.apply: finalTransforms took 33.3259ms
[debug] Load.apply: config.delegates took 0.4052ms
[debug] Load.apply: Def.make(settings)... took 94.9131ms
[debug] Load.apply: structureIndex took 35.1181ms
[debug] Load.apply: mkStreams took 0.0039ms
[info] set current project to snax-accelerators (in build file:/C:/TFG/testbech/TFG_CCM/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 51055 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 51055, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to snax-accelerators (in build file:/C:/TFG/testbech/TFG_CCM/)
[debug] > Exec(idea-shell, None, None)
