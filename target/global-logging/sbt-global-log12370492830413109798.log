[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\CARLOS~1\AppData\Local\Temp\idea11.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\CARLOS~1\AppData\Local\Temp\idea11.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.9.7 (Oracle Corporation Java 22.0.2)
[debug] Load.defaultLoad until apply took 157.3756ms
[debug]           Load.loadUnit: plugins took 99.1585ms
[debug]           Load.loadUnit: defsScala took 0.3186ms
[debug] [Loading] Scanning directory C:\TFG\testbech\TFG_CCM\project
[debug]             Load.loadUnit: mkEval took 10.6012ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\TFG\testbech\TFG_CCM\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 18.4371 ms
[info] loading settings for project tfg_ccm-build from idea11.sbt ...
[debug]               Load.resolveProject(tfg_ccm-build) took 53.7142ms
[debug]             Load.loadTransitive: finalizeProject(Project(id tfg_ccm-build, base: C:\TFG\testbech\TFG_CCM\project, plugins: List(<none>))) took 94.9077ms
[debug] [Loading] Done in C:\TFG\testbech\TFG_CCM\project, returning: (tfg_ccm-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 433.4268ms
[debug]           Load.loadUnit: cleanEvalClasses took 14.5553ms
[debug]         Load.loadUnit(file:/C:/TFG/testbech/TFG_CCM/project/, ...) took 554.493ms
[debug]       Load.apply: load took 779.5688ms
[debug]       Load.apply: resolveProjects took 7.3417ms
[debug]       Load.apply: finalTransforms took 74.0891ms
[debug]       Load.apply: config.delegates took 8.0569ms
[debug]       Load.apply: Def.make(settings)... took 532.5383ms
[debug]       Load.apply: structureIndex took 101.3134ms
[debug]       Load.apply: mkStreams took 1.7394ms
[info] loading project definition from C:\TFG\testbech\TFG_CCM\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 5146.1279ms
[debug]     Load.loadUnit: defsScala took 0.0082ms
[debug] [Loading] Scanning directory C:\TFG\testbech\TFG_CCM
[debug]       Load.loadUnit: mkEval took 0.6118ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.1356 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 27.8436ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\TFG\testbech\TFG_CCM, plugins: List(<none>))) took 31.4803ms
[debug] [Loading] Done in C:\TFG\testbech\TFG_CCM, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 3144.132ms
[debug]     Load.loadUnit: cleanEvalClasses took 17.4356ms
[debug]   Load.loadUnit(file:/C:/TFG/testbech/TFG_CCM/, ...) took 8310.9683ms
[debug] Load.apply: load took 8331.9361ms
[debug] Load.apply: resolveProjects took 0.496ms
[debug] Load.apply: finalTransforms took 41.4682ms
[debug] Load.apply: config.delegates took 0.5187ms
[debug] Load.apply: Def.make(settings)... took 98.1141ms
[debug] Load.apply: structureIndex took 25.3268ms
[debug] Load.apply: mkStreams took 0.01ms
[info] set current project to snax-accelerators (in build file:/C:/TFG/testbech/TFG_CCM/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 52395 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 52395, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to snax-accelerators (in build file:/C:/TFG/testbech/TFG_CCM/)
[debug] > Exec(idea-shell, None, None)
